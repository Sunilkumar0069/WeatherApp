// This file has been generated by the dart_json_mapper v2.2.13
// https://github.com/k-paxian/dart-json-mapper
// @dart = 2.12
import 'LocationBO.dart' as x0 show LocationBO;
import 'package:dart_json_mapper/dart_json_mapper.dart' show JsonMapper, JsonMapperAdapter, SerializationOptions, DeserializationOptions, typeOf;
import 'package:myweather/BO/CoordinatesBO/CoordinatesBO.dart' as x1 show CoordinatesBO;
import 'package:myweather/BO/WeatherForecastBO/WeatherForecastBO.dart' as x2 show WeatherForecastBO;
import 'package:myweather/BO/WeatherReportBO/WeatherReportBO.dart' as x3 show WeatherReportBO;
import 'package:myweather/BO/WindDetailsBO/WindDetailsBO.dart' as x4 show WindDetailsBO;
// No output from reflectable, there is no `main`.
final locationBoGeneratedAdapter = JsonMapperAdapter(
  title: 'myweather',
  url: 'package:myweather/BO/LocationBO/LocationBO.dart',
  reflectableData: null,
  memberSymbolMap: null,
  valueDecorators: {
    typeOf<List<x0.LocationBO>>(): (value) => value.cast<x0.LocationBO>(),
    typeOf<Set<x0.LocationBO>>(): (value) => value.cast<x0.LocationBO>(),
    typeOf<List<x1.CoordinatesBO>>(): (value) => value.cast<x1.CoordinatesBO>(),
    typeOf<Set<x1.CoordinatesBO>>(): (value) => value.cast<x1.CoordinatesBO>(),
    typeOf<List<x2.WeatherForecastBO>>(): (value) => value.cast<x2.WeatherForecastBO>(),
    typeOf<Set<x2.WeatherForecastBO>>(): (value) => value.cast<x2.WeatherForecastBO>(),
    typeOf<List<x3.WeatherReportBO>>(): (value) => value.cast<x3.WeatherReportBO>(),
    typeOf<Set<x3.WeatherReportBO>>(): (value) => value.cast<x3.WeatherReportBO>(),
    typeOf<List<x4.WindDetailsBO>>(): (value) => value.cast<x4.WindDetailsBO>(),
    typeOf<Set<x4.WindDetailsBO>>(): (value) => value.cast<x4.WindDetailsBO>()
},
  enumValues: {

});

Future<JsonMapper> initializeJsonMapperAsync({Iterable<JsonMapperAdapter> adapters = const [], SerializationOptions? serializationOptions, DeserializationOptions? deserializationOptions}) => Future(() => initializeJsonMapper(adapters: adapters, serializationOptions: serializationOptions, deserializationOptions: deserializationOptions));

JsonMapper initializeJsonMapper({Iterable<JsonMapperAdapter> adapters = const [], SerializationOptions? serializationOptions, DeserializationOptions? deserializationOptions}) {
  JsonMapper.globalSerializationOptions = serializationOptions ?? JsonMapper.globalSerializationOptions;
  JsonMapper.globalDeserializationOptions = deserializationOptions ?? JsonMapper.globalDeserializationOptions;    
  JsonMapper.enumerateAdapters([...adapters, locationBoGeneratedAdapter], (JsonMapperAdapter adapter) {
    
    JsonMapper().useAdapter(adapter);
  });
  return JsonMapper();
}